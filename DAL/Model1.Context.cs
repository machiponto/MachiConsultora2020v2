//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MachiConsultoraVFEntities : DbContext
    {
        public MachiConsultoraVFEntities()
            : base("name=MachiConsultoraVFEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Bitacora> Bitacora { get;  set; }
        public DbSet<Busqueda> Busqueda { get; set; }
        public DbSet<campos> campos { get; set; }
        public DbSet<CategoriaServicio> CategoriaServicio { get; set; }
        public DbSet<Cliente> Cliente { get; set; }
        public DbSet<ComprobanteCabecera> ComprobanteCabecera { get; set; }
        public DbSet<ComprobanteDetalle> ComprobanteDetalle { get; set; }
        public DbSet<CV> CV { get; set; }
        public DbSet<DatosPersonales> DatosPersonales { get; set; }
        public DbSet<Empresa> Empresa { get; set; }
        public DbSet<Estados> Estados { get; set; }
        public DbSet<EstudiosFormales> EstudiosFormales { get; set; }
        public DbSet<Grupo> Grupo { get; set; }
        public DbSet<Idioma> Idioma { get; set; }
        public DbSet<LocalidadBarrio> LocalidadBarrio { get; set; }
        public DbSet<Modulo> Modulo { get; set; }
        public DbSet<Municipio> Municipio { get; set; }
        public DbSet<NivelManejo> NivelManejo { get; set; }
        public DbSet<Permiso> Permiso { get; set; }
        public DbSet<PostulanteIdioma> PostulanteIdioma { get; set; }
        public DbSet<Provincia> Provincia { get; set; }
        public DbSet<Puestos> Puestos { get; set; }
        public DbSet<Servicio> Servicio { get; set; }
        public DbSet<Sucursal> Sucursal { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<TipoComprobante> TipoComprobante { get; set; }
        public DbSet<Usuario> Usuario { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SPBuscarEventosBitacora_Result> SPBuscarEventosBitacora(Nullable<int> pIdBitacora, string pModulo, string pTipo, string pDetalle)
        {
            var pIdBitacoraParameter = pIdBitacora.HasValue ?
                new ObjectParameter("pIdBitacora", pIdBitacora) :
                new ObjectParameter("pIdBitacora", typeof(int));
    
            var pModuloParameter = pModulo != null ?
                new ObjectParameter("pModulo", pModulo) :
                new ObjectParameter("pModulo", typeof(string));
    
            var pTipoParameter = pTipo != null ?
                new ObjectParameter("pTipo", pTipo) :
                new ObjectParameter("pTipo", typeof(string));
    
            var pDetalleParameter = pDetalle != null ?
                new ObjectParameter("pDetalle", pDetalle) :
                new ObjectParameter("pDetalle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPBuscarEventosBitacora_Result>("SPBuscarEventosBitacora", pIdBitacoraParameter, pModuloParameter, pTipoParameter, pDetalleParameter);
        }
    }
}
